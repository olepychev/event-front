import * as events from '../base/constant';
/**
 * Kanban CRUD operations
 */
var Crud = /** @class */ (function () {
    function Crud(parent) {
        this.parent = parent;
        this.keyField = this.parent.cardSettings.headerField;
    }
    Crud.prototype.getQuery = function () {
        return this.parent.dataModule.generateQuery();
    };
    Crud.prototype.getTable = function () {
        if (this.parent.query) {
            var query = this.parent.query.clone();
            return query.fromTable;
        }
        return null;
    };
    Crud.prototype.refreshData = function (args) {
        var _this = this;
        var actionArgs = {
            requestType: args.requestType, cancel: false, addedRecords: args.addedRecords,
            changedRecords: args.changedRecords, deletedRecords: args.deletedRecords
        };
        if (this.parent.dataModule.dataManager.dataSource.offline) {
            this.parent.trigger(events.actionComplete, actionArgs, function (offlineArgs) {
                if (!offlineArgs.cancel) {
                    _this.parent.dataModule.refreshDataManager();
                }
            });
        }
        else {
            args.promise.then(function (e) {
                if (_this.parent.isDestroyed) {
                    return;
                }
                _this.parent.trigger(events.actionComplete, actionArgs, function (onlineArgs) {
                    if (!onlineArgs.cancel) {
                        _this.parent.dataModule.refreshDataManager();
                    }
                });
            }).catch(function (e) {
                if (_this.parent.isDestroyed) {
                    return;
                }
                _this.parent.trigger(events.actionFailure, { error: e });
            });
        }
    };
    Crud.prototype.addCard = function (cardData) {
        var _this = this;
        var args = {
            cancel: false, requestType: 'cardCreate', addedRecords: (cardData instanceof Array) ? cardData : [cardData],
            changedRecords: [], deletedRecords: []
        };
        this.parent.trigger(events.actionBegin, args, function (addArgs) {
            if (!addArgs.cancel) {
                var promise = null;
                var editParms = {
                    addedRecords: (cardData instanceof Array) ? cardData : [cardData], changedRecords: [], deletedRecords: []
                };
                if (cardData instanceof Array) {
                    promise = _this.parent.dataModule.dataManager.saveChanges(editParms, _this.keyField, _this.getTable(), _this.getQuery());
                }
                else {
                    promise = _this.parent.dataModule.dataManager.insert(cardData, _this.getTable(), _this.getQuery());
                }
                var crudArgs = {
                    requestType: 'cardCreated', cancel: false, promise: promise, addedRecords: editParms.addedRecords,
                    changedRecords: editParms.changedRecords, deletedRecords: editParms.deletedRecords
                };
                _this.refreshData(crudArgs);
            }
        });
    };
    Crud.prototype.updateCard = function (cardData) {
        var _this = this;
        var args = {
            requestType: 'cardChange', cancel: false, addedRecords: [],
            changedRecords: (cardData instanceof Array) ? cardData : [cardData], deletedRecords: []
        };
        this.parent.trigger(events.actionBegin, args, function (updateArgs) {
            if (!updateArgs.cancel) {
                var promise = null;
                var editParms = {
                    addedRecords: [], changedRecords: (cardData instanceof Array) ? cardData : [cardData], deletedRecords: []
                };
                if (cardData instanceof Array) {
                    promise = _this.parent.dataModule.dataManager.saveChanges(editParms, _this.keyField, _this.getTable(), _this.getQuery());
                }
                else {
                    promise = _this.parent.dataModule.dataManager.update(_this.keyField, cardData, _this.getTable(), _this.getQuery());
                }
                var crudArgs = {
                    requestType: 'cardChanged', cancel: false, promise: promise, addedRecords: editParms.addedRecords,
                    changedRecords: editParms.changedRecords, deletedRecords: editParms.deletedRecords
                };
                _this.refreshData(crudArgs);
            }
        });
    };
    Crud.prototype.deleteCard = function (cardData) {
        var _this = this;
        var editParms = { addedRecords: [], changedRecords: [], deletedRecords: [] };
        if (typeof cardData === 'string' || typeof cardData === 'number') {
            editParms.deletedRecords = this.parent.kanbanData.filter(function (data) {
                return data[_this.keyField] === cardData;
            });
        }
        else {
            editParms.deletedRecords = (cardData instanceof Array) ? cardData : [cardData];
        }
        var args = {
            requestType: 'cardRemove', cancel: false, addedRecords: [],
            changedRecords: [], deletedRecords: editParms.deletedRecords
        };
        this.parent.trigger(events.actionBegin, args, function (deleteArgs) {
            if (!deleteArgs.cancel) {
                var promise = null;
                if (editParms.deletedRecords.length > 1) {
                    promise = _this.parent.dataModule.dataManager.saveChanges(editParms, _this.keyField, _this.getTable(), _this.getQuery());
                }
                else {
                    promise = _this.parent.dataModule.dataManager.remove(_this.keyField, cardData, _this.getTable(), _this.getQuery());
                }
                var crudArgs = {
                    requestType: 'cardRemoved', cancel: false, promise: promise, addedRecords: editParms.addedRecords,
                    changedRecords: editParms.changedRecords, deletedRecords: editParms.deletedRecords
                };
                _this.refreshData(crudArgs);
            }
        });
    };
    return Crud;
}());
export { Crud };
