import { KeyboardEvents, addClass, removeClass, classList, closest } from '@syncfusion/ej2-base';
import * as cls from '../base/css-constant';
/**
 * Drag and Drop module is used to perform card actions.
 * @hidden
 */
var Keyboard = /** @class */ (function () {
    /**
     * Constructor for keyboard module
     * @private
     */
    function Keyboard(parent) {
        this.keyConfigs = {
            firstCardSelection: '36',
            lastCardSelection: '35',
            upArrow: '38',
            downArrow: '40',
            rightArrow: '39',
            leftArrow: '37',
            swimlaneExpandAll: 'ctrl+40',
            swimlaneCollapseAll: 'ctrl+38',
            selectedSwimlaneExpand: 'alt+40',
            selectedSwimlaneCollapse: 'alt+38',
            selectedColumnCollapse: 'ctrl+37',
            selectedColumnExpand: 'ctrl+39',
            multiSelectionByUpArrow: 'shift+38',
            multiSelectionByDownArrow: 'shift+40',
            multiSelectionByLeftArrow: 'shift+37',
            multiSelectionByRightArrow: 'shift+39',
        };
        this.parent = parent;
        this.parent.element.tabIndex = this.parent.element.tabIndex === -1 ? 0 : this.parent.element.tabIndex;
        this.keyboardModule = new KeyboardEvents(this.parent.element, {
            keyAction: this.keyActionHandler.bind(this),
            keyConfigs: this.keyConfigs,
            eventName: 'keydown'
        });
    }
    Keyboard.prototype.keyActionHandler = function (e) {
        var selectedCard = this.parent.element.querySelectorAll('.e-card.e-selection').item(0);
        if (!selectedCard && e.action !== 'firstCardSelection' && e.action !== 'lastCardSelection') {
            return;
        }
        var key;
        switch (e.action) {
            case 'upArrow':
            case 'downArrow':
            case 'multiSelectionByUpArrow':
            case 'multiSelectionByDownArrow':
                key = closest(this.parent.actionModule.lastCardSelection, '.e-content-cells').getAttribute('data-key');
                var cardSelector = '.e-content-cells[data-key=' + key + '] .e-card';
                var allCards = [].slice.call(this.parent.element.querySelectorAll(cardSelector));
                var curId = this.parent.actionModule.lastCardSelection.getAttribute('data-id');
                var curIndex = this.getCardId(allCards).indexOf(curId);
                var isShift = ((e.action === 'multiSelectionByUpArrow' || e.action === 'multiSelectionByDownArrow')
                    && this.parent.cardSettings.selectionType === 'Multiple');
                var index = (e.action === 'upArrow' || e.action === 'multiSelectionByUpArrow') ? curIndex - 1 : curIndex + 1;
                this.parent.actionModule.cardSelection(allCards[index], false, isShift);
                break;
            case 'rightArrow':
            case 'leftArrow':
            case 'multiSelectionByLeftArrow':
            case 'multiSelectionByRightArrow':
                this.moveCards(e.action, this.parent.actionModule.lastCardSelection);
                break;
            case 'firstCardSelection':
            case 'lastCardSelection':
                if (selectedCard) {
                    removeClass([selectedCard], 'e-selection');
                    var selection = this.parent.actionModule.selectionArray;
                    selection.splice(selection.indexOf(selectedCard.getAttribute('data-id')), 1);
                }
                var cards = [].slice.call(this.parent.element.querySelectorAll('.' + cls.CARD_CLASS));
                var element = e.action === 'firstCardSelection' ? cards[0] : cards[cards.length - 1];
                this.parent.actionModule.cardSelection(element, false, false);
                break;
            case 'swimlaneExpandAll':
            case 'swimlaneCollapseAll':
            case 'selectedSwimlaneExpand':
            case 'selectedSwimlaneCollapse':
                if (this.parent.swimlaneSettings.keyField) {
                    this.swimlaneExpandCollapse(e.action);
                }
                break;
            case 'selectedColumnExpand':
            case 'selectedColumnCollapse':
                key = selectedCard.getAttribute('data-key');
                var cell = this.parent.element.querySelector('.e-header-cells[data-key=' + key + ']');
                if (cell.classList.contains(cls.HEADER_ROW_TOGGLE_CLASS)) {
                    if ((cell.classList.contains('e-collapsed') && e.action === 'selectedColumnCollapse') ||
                        (!cell.classList.contains('e-collapsed') && e.action === 'selectedColumnExpand')) {
                        return;
                    }
                    else {
                        this.parent.actionModule.columnExpandCollapse(cell);
                    }
                }
                break;
        }
    };
    Keyboard.prototype.swimlaneExpandCollapse = function (action) {
        var className = '.e-card.e-selection';
        if (action === 'swimlaneExpandAll' || action === 'swimlaneCollapseAll') {
            className = '.e-content-row.e-swimlane-row';
        }
        var element = [].slice.call(this.parent.element.querySelectorAll(className));
        var collapseCount = this.parent.element.querySelectorAll(className + '.e-collapsed').length;
        if ((action === 'swimlaneCollapseAll' && element.length - collapseCount === 0) ||
            (action === 'swimlaneExpandAll' && element.length - collapseCount === element.length)) {
            return;
        }
        element.forEach(function (ele) {
            if (ele.classList.contains(cls.CARD_CLASS)) {
                ele = closest(ele, '.' + cls.CONTENT_ROW_CLASS).previousElementSibling;
            }
            if (ele.classList.contains(cls.COLLAPSED_CLASS)) {
                removeClass([ele, ele.nextElementSibling], cls.COLLAPSED_CLASS);
                classList(ele.querySelector('.' + cls.ICON_CLASS), [cls.SWIMLANE_ROW_EXPAND], [cls.SWIMLANE_ROW_COLLAPSE]);
            }
            else if (!ele.classList.contains(cls.COLLAPSED_CLASS)) {
                addClass([ele, ele.nextElementSibling], cls.COLLAPSED_CLASS);
                classList(ele.querySelector('.' + cls.ICON_CLASS), [cls.SWIMLANE_ROW_COLLAPSE], [cls.SWIMLANE_ROW_EXPAND]);
            }
        });
    };
    Keyboard.prototype.getCardId = function (cardElements) {
        var curCardId = [];
        cardElements.forEach(function (el) { return curCardId.push(el.getAttribute('data-id')); });
        return curCardId;
    };
    Keyboard.prototype.moveNextRow = function (row) {
        for (var i = 0; i < row.childElementCount; i++) {
            var nextCell = row.children[i];
            var nextCellCards = [].slice.call(nextCell.querySelectorAll('.' + cls.CARD_CLASS));
            if (nextCellCards.length > 0) {
                this.parent.actionModule.cardSelection(nextCellCards[0], false, false);
                if (row.classList.contains('e-collapsed')) {
                    this.swimlaneExpandCollapse('selectedSwimlaneExpand');
                }
                break;
            }
        }
    };
    Keyboard.prototype.movePreviousRow = function (row) {
        for (var i = (row.childElementCount - 1); i >= 0; i--) {
            var nextCell = row.children[i];
            var nextCellCards = [].slice.call(nextCell.querySelectorAll('.' + cls.CARD_CLASS));
            if (nextCellCards.length > 0) {
                if (!row.classList.contains('e-collapsed')) {
                    this.swimlaneExpandCollapse('selectedSwimlaneCollapse');
                }
                this.parent.actionModule.cardSelection(nextCellCards.slice(-1)[0], false, false);
                break;
            }
        }
    };
    Keyboard.prototype.cardIndex = function (isSame, nextCellCards, curIndex, action) {
        if (isSame) {
            var isShift = ((action === 'multiSelectionByRightArrow' || action === 'multiSelectionByLeftArrow')
                && this.parent.cardSettings.selectionType === 'Multiple');
            if (nextCellCards[curIndex]) {
                this.parent.actionModule.cardSelection(nextCellCards[curIndex], false, isShift);
            }
            else {
                this.parent.actionModule.cardSelection(nextCellCards.slice(-1)[0], false, isShift);
            }
        }
    };
    Keyboard.prototype.moveCards = function (action, card) {
        var nextCell;
        var nextCellCards;
        var curCell = closest(card, '.e-content-cells');
        var curCellCards = [].slice.call(curCell.querySelectorAll('.e-card'));
        var curRow = closest(curCell, '.e-content-row');
        var curIndex = this.getCardId(curCellCards).indexOf(card.getAttribute('data-id'));
        if (action === 'rightArrow' || action === 'multiSelectionByRightArrow') {
            if (curCell.cellIndex === (curRow.childElementCount - 1) && this.parent.swimlaneSettings.keyField
                && action !== 'multiSelectionByRightArrow') {
                if (curIndex < (this.getCardId(curCellCards).length - 1)) {
                    this.parent.actionModule.cardSelection(this.parent.actionModule.lastCardSelection.nextElementSibling, false, false);
                }
                else if (curRow.rowIndex !== (this.parent.element.querySelectorAll('.' + cls.CONTENT_ROW_CLASS).length - 1)) {
                    var targetRow = this.parent.element.querySelector('.' + cls.CONTENT_ROW_CLASS + (":nth-child(" + (curRow.rowIndex + 3) + ")"));
                    this.moveNextRow(targetRow);
                }
            }
            else {
                var isSame = false;
                for (var i = curCell.cellIndex + 1; i < curRow.children.length; i++) {
                    nextCell = curRow.children[i];
                    nextCellCards = [].slice.call(nextCell.querySelectorAll('.' + cls.CARD_CLASS));
                    if (nextCellCards.length > 0) {
                        isSame = true;
                        break;
                    }
                }
                this.cardIndex(isSame, nextCellCards, curIndex, action);
            }
        }
        else {
            if (curCell.cellIndex === 0 && this.parent.swimlaneSettings.keyField && action !== 'multiSelectionByLeftArrow') {
                if (curIndex > 0) {
                    this.parent.actionModule.cardSelection(this.parent.actionModule.lastCardSelection.previousElementSibling, false, false);
                }
                else if (curRow.rowIndex > 1) {
                    var className = '.' + cls.CONTENT_ROW_CLASS + (":nth-child(" + (curRow.rowIndex - 1) + ")") + ':not(.e-collapsed)';
                    var targetRow = this.parent.element.querySelector(className);
                    if (targetRow) {
                        this.movePreviousRow(targetRow);
                    }
                }
            }
            else {
                var isSame = false;
                for (var i = (curCell.cellIndex - 1); i >= 0; i--) {
                    nextCell = curRow.children[i];
                    nextCellCards = [].slice.call(nextCell.querySelectorAll('.' + cls.CARD_CLASS));
                    if (nextCellCards.length > 0) {
                        isSame = true;
                        break;
                    }
                    if (i === 0 && this.parent.swimlaneSettings.keyField) {
                        var row = this.parent.element.querySelector('.' + cls.CONTENT_ROW_CLASS + (":nth-child(" + (curRow.rowIndex - 1) + ")"));
                        this.movePreviousRow(row);
                    }
                }
                this.cardIndex(isSame, nextCellCards, curIndex, action);
            }
        }
    };
    /**
     * Get module name.
     */
    Keyboard.prototype.getModuleName = function () {
        return 'keyboard';
    };
    /**
     * To destroy the keyboard module.
     * @return {void}
     * @private
     */
    Keyboard.prototype.destroy = function () {
        this.keyboardModule.destroy();
    };
    return Keyboard;
}());
export { Keyboard };
