{"remainingRequest":"C:\\Users\\saini\\Desktop\\event-front\\event-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\saini\\Desktop\\event-front\\event-front\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\saini\\Desktop\\event-front\\event-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\saini\\Desktop\\event-front\\event-front\\src\\views\\subEventList.vue?vue&type=template&id=3255d5dc&scoped=true&","dependencies":[{"path":"C:\\Users\\saini\\Desktop\\event-front\\event-front\\src\\views\\subEventList.vue","mtime":1673646423055},{"path":"C:\\Users\\saini\\Desktop\\event-front\\event-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673646901215},{"path":"C:\\Users\\saini\\Desktop\\event-front\\event-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1673646917331},{"path":"C:\\Users\\saini\\Desktop\\event-front\\event-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673646901215},{"path":"C:\\Users\\saini\\Desktop\\event-front\\event-front\\node_modules\\vue-loader\\lib\\index.js","mtime":1673646912770}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:var render = function () {
  var _vm = this
  var _h = _vm.$createElement
  var _c = _vm._self._c || _h
  return _c("div", [
    _c(
      "div",
      { staticClass: "page-wraper" },
      [
        _c("Header"),
        _c("div", { staticClass: "page-content bg-white" }, [
          _vm._m(0),
          _c("div", { staticClass: "section-full bg-white plan-tools-bx" }, [
            _c("div", { staticClass: "container" }, [
              _c(
                "ul",
                { staticClass: "plan-tools-list" },
                _vm._l(_vm.subeventData, function (subevent) {
                  return _c(
                    "li",
                    {
                      attrs: {
                        "data-wow-duration": "2s",
                        "data-wow-delay": "0.1s",
                      },
                      on: {
                        click: function ($event) {
                          return _vm.openDetails(subevent.eventId)
                        },
                      },
                    },
                    [
                      _c(
                        "div",
                        {
                          class:
                            _vm.selected == subevent.eventId
                              ? "list-box home-list active"
                              : "list-box home-list",
                        },
                        [
                          _c("h6", { staticClass: "title" }, [
                            _c("i", { staticClass: "la la-home" }),
                            _vm._v(_vm._s(subevent.title) + " "),
                          ]),
                          _c("p", [_vm._v("150 days to go")]),
                        ]
                      ),
                    ]
                  )
                }),
                0
              ),
            ]),
          ]),
          _c("div", { staticClass: "section-full content-inner bg-gray" }, [
            _c("div", { staticClass: "container" }, [
              _c("div", { staticClass: "row column-reverse" }, [
                _c("div", { staticClass: "col-lg-9 col-md-8 col-sm-12" }, [
                  _c(
                    "div",
                    {
                      staticClass:
                        "section-full wedding-venues-details bg-gray",
                    },
                    [
                      _c("div", { staticClass: "container" }, [
                        _c("div", { staticClass: "row" }, [
                          _c(
                            "div",
                            {
                              staticClass:
                                "col-xl-12 col-lg-12 col-md-12 p-b30",
                            },
                            [
                              _c("div", { staticClass: "details-media-bx" }, [
                                _c("div", { staticClass: "featured-info" }, [
                                  _c("h4", { staticClass: "title" }, [
                                    _vm._v(_vm._s(_vm.subeventDetails.title)),
                                  ]),
                                  _c("p", { staticClass: "address" }, [
                                    _c("i", {
                                      staticClass:
                                        "fa fa-map-marker m-r5 text-primary",
                                    }),
                                    _vm._v(
                                      " " +
                                        _vm._s(
                                          _vm.subeventDetails.location &&
                                            _vm.subeventDetails.location
                                              .address +
                                              ", " +
                                              _vm.subeventDetails.location
                                                .city +
                                              ", " +
                                              _vm.subeventDetails.location
                                                .state +
                                              ", " +
                                              _vm.subeventDetails.location
                                                .country +
                                              ", " +
                                              _vm.subeventDetails.location
                                                .postalCode
                                        ) +
                                        " "
                                    ),
                                  ]),
                                ]),
                                _c("div", { staticClass: "featured-lists" }, [
                                  _c("ul", { staticClass: "navbar" }, [
                                    _c("li", [
                                      _c(
                                        "a",
                                        {
                                          staticClass: "scroll nav-link",
                                          attrs: { href: "#price" },
                                        },
                                        [
                                          _c("i", {
                                            staticClass: "la la-money",
                                          }),
                                          _vm._v(
                                            "$" +
                                              _vm._s(
                                                _vm.subeventDetails.budget &&
                                                  _vm.addCommas(
                                                    String(
                                                      _vm.subeventDetails.budget
                                                    )
                                                  )
                                              )
                                          ),
                                        ]
                                      ),
                                    ]),
                                    _c("li", [
                                      _c(
                                        "a",
                                        {
                                          staticClass: "scroll nav-link",
                                          attrs: { href: "#upto" },
                                        },
                                        [
                                          _c("i", {
                                            staticClass: "la la-users",
                                          }),
                                          _vm._v(
                                            _vm._s(
                                              _vm.subeventDetails
                                                .estimatedGuests &&
                                                _vm.addCommas(
                                                  String(
                                                    _vm.subeventDetails
                                                      .estimatedGuests
                                                  )
                                                )
                                            )
                                          ),
                                        ]
                                      ),
                                    ]),
                                    _vm._m(1),
                                    _vm._m(2),
                                    _vm._m(3),
                                  ]),
                                ]),
                                _c("div", { staticClass: "featured-media" }, [
                                  _c(
                                    "div",
                                    { staticClass: "featured-gallery" },
                                    [
                                      _c(
                                        "div",
                                        { staticClass: "row column-reverse" },
                                        [
                                          _c(
                                            "div",
                                            {
                                              staticClass:
                                                "col-lg-6 col-md-6 col-sm-6",
                                            },
                                            [
                                              _c(
                                                "h5",
                                                { staticClass: "title" },
                                                [_vm._v("Guests' details")]
                                              ),
                                              _c(
                                                "ul",
                                                { staticClass: "dec-exp-bx" },
                                                [
                                                  _c("li", [
                                                    _vm._v(" Attending Guests"),
                                                    _c("span", [
                                                      _vm._v(
                                                        _vm._s(
                                                          _vm.guestCount
                                                            .guestCountDto
                                                            .attending
                                                        )
                                                      ),
                                                    ]),
                                                  ]),
                                                  _c("li", [
                                                    _vm._v(" Invited Guests"),
                                                    _c("span", [
                                                      _vm._v(
                                                        _vm._s(
                                                          _vm.guestCount
                                                            .guestCountDto
                                                            .invited
                                                        )
                                                      ),
                                                    ]),
                                                  ]),
                                                  _c("li", [
                                                    _vm._v(" Maybe Attending"),
                                                    _c("span", [
                                                      _vm._v(
                                                        _vm._s(
                                                          _vm.guestCount
                                                            .guestCountDto.mayBe
                                                        )
                                                      ),
                                                    ]),
                                                  ]),
                                                  _c("li", [
                                                    _vm._v(
                                                      " Guests Not Attending"
                                                    ),
                                                    _c("span", [
                                                      _vm._v(
                                                        _vm._s(
                                                          _vm.guestCount
                                                            .guestCountDto
                                                            .notAttending
                                                        )
                                                      ),
                                                    ]),
                                                  ]),
                                                  _c("li", [
                                                    _vm._v(
                                                      " Unconfirmed Guests"
                                                    ),
                                                    _c("span", [
                                                      _vm._v(
                                                        _vm._s(
                                                          _vm.guestCount
                                                            .guestCountDto
                                                            .unconfirmed
                                                        )
                                                      ),
                                                    ]),
                                                  ]),
                                                ]
                                              ),
                                            ]
                                          ),
                                          _c(
                                            "div",
                                            {
                                              staticClass:
                                                "col-lg-6 col-md-6 col-sm-6",
                                            },
                                            [
                                              _c(
                                                "h5",
                                                { staticClass: "title" },
                                                [_vm._v("Invites' details")]
                                              ),
                                              _c(
                                                "ul",
                                                { staticClass: "dec-exp-bx" },
                                                [
                                                  _c("li", [
                                                    _vm._v(" Total invites"),
                                                    _c("span", [
                                                      _vm._v(
                                                        _vm._s(
                                                          _vm.guestCount
                                                            .inviteCountDto
                                                            .total
                                                        )
                                                      ),
                                                    ]),
                                                  ]),
                                                  _c("li", [
                                                    _vm._v(" Invited"),
                                                    _c("span", [
                                                      _vm._v(
                                                        _vm._s(
                                                          _vm.guestCount
                                                            .inviteCountDto
                                                            .invited
                                                        )
                                                      ),
                                                    ]),
                                                  ]),
                                                  _c("li", [
                                                    _vm._v(" Pending"),
                                                    _c("span", [
                                                      _vm._v(
                                                        _vm._s(
                                                          _vm.guestCount
                                                            .inviteCountDto
                                                            .pending
                                                        )
                                                      ),
                                                    ]),
                                                  ]),
                                                  _c("li", [
                                                    _vm._v(
                                                      " Expected Attendees"
                                                    ),
                                                    _c("span", [
                                                      _vm._v(
                                                        _vm._s(
                                                          _vm.guestCount
                                                            .inviteCountDto
                                                            .expectedAttendees
                                                        )
                                                      ),
                                                    ]),
                                                  ]),
                                                  _c("li", [
                                                    _vm._v(
                                                      " Invited Attendees"
                                                    ),
                                                    _c("span", [
                                                      _vm._v(
                                                        _vm._s(
                                                          _vm.guestCount
                                                            .inviteCountDto
                                                            .invitedAttendees
                                                        )
                                                      ),
                                                    ]),
                                                  ]),
                                                ]
                                              ),
                                            ]
                                          ),
                                        ]
                                      ),
                                      _c("img", {
                                        attrs: {
                                          src: "images/blog/default/thum3.jpg",
                                          alt: "",
                                        },
                                      }),
                                      _vm._m(4),
                                    ]
                                  ),
                                ]),
                              ]),
                              _c("h5", { staticClass: "details-title" }, [
                                _vm._v("Event Information"),
                              ]),
                              _c("div", { staticClass: "description-box" }, [
                                _c("p", [
                                  _vm._v(
                                    " " +
                                      _vm._s(
                                        _vm.subeventDetails.shortDescription &&
                                          _vm.subeventDetails.shortDescription
                                      ) +
                                      " "
                                  ),
                                ]),
                                _vm._m(5),
                                _c("h4", { staticClass: "title" }, [
                                  _vm._v(" Personal Message from the Manager "),
                                ]),
                                _c("p", [
                                  _vm._v(
                                    "Name of Wedding Contact: Chanon deValois"
                                  ),
                                ]),
                                _c("p", [
                                  _vm._v(
                                    " Hello, May I take this opportunity to wish you congratulations on your engagement! This is such an exciting time and I know from experience that sometimes it feels like there is so much to do. My aim is to provide you with friendly and professional service. I provide clear and open pricing, no hidden agenda or unexpected extras. My half day coverage starts at £600 and full day £1200. Please email me to find out more. I look forward to hearing from you. "
                                  ),
                                ]),
                              ]),
                              _c(
                                "a",
                                {
                                  staticClass:
                                    "btn btn-block gradient green m-b30",
                                  attrs: {
                                    href: "javascript:;",
                                    "data-toggle": "modal",
                                    "data-target": "#exampleModal2",
                                  },
                                },
                                [_vm._v("Request a quote")]
                              ),
                              _c("h5", { staticClass: "text-quote" }, [
                                _vm._v(
                                  " Matt Wing is a professional and talented photographer who has an eye for the special moments in your day that could easily go unseen by other photographers. His gorgeous photography speaks for itself! "
                                ),
                              ]),
                              _vm._m(6),
                              _c(
                                "h5",
                                {
                                  staticClass: "details-title",
                                  attrs: { id: "price" },
                                },
                                [_vm._v(" Pricing & Costs ")]
                              ),
                              _vm._m(7),
                              _c(
                                "h5",
                                {
                                  staticClass: "details-title",
                                  attrs: { id: "upto" },
                                },
                                [_vm._v(" Features & Capacity ")]
                              ),
                              _vm._m(8),
                              _c("h5", { staticClass: "details-title" }, [
                                _vm._v("Details"),
                              ]),
                              _vm._m(9),
                              _vm._m(10),
                              _vm._m(11),
                              _vm._m(12),
                              _c(
                                "h5",
                                {
                                  staticClass: "details-title",
                                  attrs: {
                                    "data-toggle": "collapse",
                                    "data-target": "#map",
                                    "aria-expanded": "false",
                                    "aria-controls": "map",
                                  },
                                },
                                [_vm._v(" Location & Contact Details ")]
                              ),
                              _vm._m(13),
                              _vm._m(14),
                              _c("h5", { staticClass: "details-title" }, [
                                _vm._v("Press & Awards(5)"),
                              ]),
                              _vm._m(15),
                              _vm._m(16),
                              _c("h5", { staticClass: "details-title" }, [
                                _vm._v(" Preferred Supplier List(23) "),
                              ]),
                              _vm._m(17),
                              _c("h5", { staticClass: "details-title" }, [
                                _vm._v("FAQ (10)"),
                              ]),
                              _vm._m(18),
                              _vm._m(19),
                              _vm._m(20),
                              _c("h5", { staticClass: "details-title" }, [
                                _vm._v("Up Next"),
                              ]),
                              _vm._m(21),
                            ]
                          ),
                        ]),
                      ]),
                    ]
                  ),
                ]),
                _c("div", { staticClass: "col-lg-3 col-md-4 m-b30" }, [
                  _c("div", { staticClass: "pages-bx" }, [
                    _c("ul", { staticClass: "side-page-bx" }, [
                      _vm._m(22),
                      _c("li", [
                        _c(
                          "a",
                          {
                            attrs: { href: "#" },
                            on: { click: _vm.editSubevent },
                          },
                          [_vm._v("Edit Event")]
                        ),
                      ]),
                      _c("li", [
                        _c(
                          "a",
                          {
                            attrs: { href: "#" },
                            on: { click: _vm.openGuestListPage },
                          },
                          [_vm._v("Guest List")]
                        ),
                      ]),
                      _c("li", [
                        _c(
                          "a",
                          {
                            attrs: { href: "#" },
                            on: { click: _vm.openBudgetPage },
                          },
                          [_vm._v("Budget")]
                        ),
                      ]),
                      _c("li", [
                        _c(
                          "a",
                          {
                            attrs: { href: "#" },
                            on: { click: _vm.addSubevent },
                          },
                          [_vm._v("Add Event")]
                        ),
                      ]),
                    ]),
                  ]),
                ]),
              ]),
            ]),
          ]),
        ]),
        _c("Footer"),
      ],
      1
    ),
  ])
}
var staticRenderFns = [
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      {
        staticClass:
          "dlab-bnr-inr text-center dlab-bnr-inr-sm overlay-black-dark",
        staticStyle: {
          "background-image": "url(images/main-slider/slide1.jpg)",
          "background-size": "cover",
        },
        attrs: { id: "app-banner" },
      },
      [
        _c("div", { staticClass: "container" }, [
          _c("div", { staticClass: "dlab-bnr-inr-entry align-m dlab-home" }, [
            _c("div", { staticClass: "bnr-content" }, [
              _c("div", { staticClass: "wedding-details" }, [
                _c("div", { staticClass: "wedding-info wedding-info-left" }, [
                  _c("h2", { staticClass: "wedding-name" }, [
                    _vm._v("Kuldeep Gaur"),
                  ]),
                  _c("div", { staticClass: "wedding-img" }, [
                    _c("img", {
                      attrs: { src: "images/testimonials/pic1.jpg", alt: "" },
                    }),
                  ]),
                ]),
                _c("div", { staticClass: "wedding-heart" }, [
                  _c("i", { staticClass: "fa fa-heart" }),
                ]),
                _c("div", { staticClass: "wedding-info wedding-info-right" }, [
                  _c("div", { staticClass: "wedding-img" }, [
                    _c("img", {
                      attrs: { src: "images/testimonials/pic2.jpg", alt: "" },
                    }),
                  ]),
                  _c("h2", { staticClass: "wedding-name" }, [
                    _vm._v("Deepika Sharma"),
                  ]),
                ]),
              ]),
              _c("div", { staticClass: "wedding-location" }, [
                _c(
                  "a",
                  {
                    staticClass: "location-name",
                    attrs: { href: "settings.html" },
                  },
                  [
                    _vm._v("London "),
                    _c("i", { staticClass: "fa fa-pencil m-l5" }),
                  ]
                ),
                _c("p", { staticClass: "location-info" }, [
                  _vm._v(" A Sunday in November 2019 157 days to go! "),
                ]),
              ]),
            ]),
          ]),
        ]),
        _c("div", { staticClass: "search-filter" }, [
          _c("div", { staticClass: "container" }, [
            _c(
              "form",
              {
                staticClass: "filter-form",
                attrs: { action: "wedding-venues-search.html" },
              },
              [
                _c("div", { staticClass: "row" }, [
                  _c(
                    "div",
                    { staticClass: "col-lg-4 col-md-4 col-sm-6 col-6" },
                    [
                      _c("input", {
                        staticClass: "form-control",
                        attrs: {
                          type: "text",
                          placeholder: "We’re looking for",
                        },
                      }),
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-3 col-md-3 col-sm-6 col-6" },
                    [
                      _c("input", {
                        staticClass: "form-control",
                        attrs: { type: "text", placeholder: "Near" },
                      }),
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-3 col-md-3 col-sm-6 col-6" },
                    [
                      _c("input", {
                        staticClass: "form-control",
                        attrs: { type: "text", placeholder: "Or Called" },
                      }),
                    ]
                  ),
                  _c(
                    "div",
                    { staticClass: "col-lg-2 col-md-2 col-sm-6 col-6 d-flex" },
                    [
                      _c(
                        "button",
                        {
                          staticClass: "btn btn-block gradient text-uppercase",
                        },
                        [_vm._v(" Search ")]
                      ),
                    ]
                  ),
                ]),
              ]
            ),
          ]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("li", [
      _c("a", { staticClass: "scroll nav-link", attrs: { href: "#upto" } }, [
        _c("i", { staticClass: "la la-bed" }),
        _vm._v("9 Bedrooms"),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("li", [
      _c("a", { staticClass: "scroll nav-link", attrs: { href: "#upto" } }, [
        _c("i", { staticClass: "la la-diamond" }),
        _vm._v("Exclusive Use"),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("li", [
      _c("a", { staticClass: "scroll nav-link", attrs: { href: "#upto" } }, [
        _c("i", { staticClass: "la la-pencil" }),
        _vm._v("Wedding Licence"),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("button", { staticClass: "lightGalleryButton" }, [
      _c("i", { staticClass: "fa fa-picture-o" }),
      _vm._v(" View Photos (12) "),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "dlab-divider bg-gray-dark" }, [
      _c("i", { staticClass: "icon-dot c-square" }),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row sp20" }, [
      _c("div", { staticClass: "col-md-6 m-b20" }, [
        _c(
          "div",
          {
            staticClass: "card-bx red h100",
            attrs: { "data-toggle": "modal", "data-target": "#deal" },
          },
          [
            _c("div", { staticClass: "inner" }, [
              _c("span", { staticClass: "tag-btn" }, [
                _vm._v("Exclusive Wedding Manager Deal"),
              ]),
              _c("h6", { staticClass: "title" }, [
                _vm._v(" Wedding Manager Couple Discount "),
              ]),
              _c("p", [
                _vm._v(
                  " SENSATIONAL special offer for all remaining 2019 weekend dates: £6,199 (incl. VAT) catering for 80 day guests/a total of 100 evening guests; DJ "
                ),
              ]),
            ]),
          ]
        ),
      ]),
      _c("div", { staticClass: "col-md-6 m-b20" }, [
        _c(
          "div",
          {
            staticClass: "card-bx blue h100",
            attrs: { "data-toggle": "modal", "data-target": "#deal" },
          },
          [
            _c("div", { staticClass: "inner" }, [
              _c("span", { staticClass: "tag-btn" }, [
                _vm._v("Wedding Manager Deal"),
              ]),
              _c("h6", { staticClass: "title" }, [
                _vm._v("Seasonal Offer Available"),
              ]),
              _c("p", [_vm._v("Save £800")]),
            ]),
          ]
        ),
      ]),
      _c("div", { staticClass: "col-md-6 m-b20" }, [
        _c(
          "div",
          {
            staticClass: "card-bx green h100",
            attrs: { "data-toggle": "modal", "data-target": "#deal" },
          },
          [
            _c("div", { staticClass: "inner" }, [
              _c("span", { staticClass: "tag-btn" }, [
                _vm._v("Exclusive Wedding Manager Deal"),
              ]),
              _c("h6", { staticClass: "title" }, [
                _vm._v(" Wedding Manager Couple Discount "),
              ]),
              _c("p", [_vm._v("Save £800")]),
            ]),
          ]
        ),
      ]),
      _c("div", { staticClass: "col-md-6 m-b20" }, [
        _c(
          "div",
          {
            staticClass: "card-bx yellow h100",
            attrs: { "data-toggle": "modal", "data-target": "#deal" },
          },
          [
            _c("div", { staticClass: "inner" }, [
              _c("span", { staticClass: "tag-btn" }, [
                _vm._v("Exclusive Wedding Manager Deal"),
              ]),
              _c("h6", { staticClass: "title" }, [
                _vm._v(" Wedding Manager Couple Discount "),
              ]),
              _c("p", [_vm._v("Save £800")]),
            ]),
          ]
        ),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "pricing-costs-box" }, [
      _c("h5", { staticClass: "title" }, [_vm._v("Prices start at")]),
      _c("h2", { staticClass: "price" }, [_vm._v("£1200")]),
      _c("div", { staticClass: "row sp20" }, [
        _c("div", { staticClass: "col-md-6 m-b20" }, [
          _c("div", { staticClass: "pricost-box" }, [
            _c("h5", { staticClass: "pricost-title" }, [
              _c("i", { staticClass: "la la-institution" }),
              _vm._v("Venue Hire Only "),
            ]),
            _c("div", { staticClass: "card-bx red bordered" }, [
              _c("div", { staticClass: "inner" }, [
                _c("ul", { staticClass: "deal-list" }, [
                  _c("li", [
                    _c("span", [_vm._v("Prices Start At")]),
                    _c("strong", [_vm._v("£2,999")]),
                  ]),
                  _c("li", [
                    _c("span", [_vm._v("Prices Start At")]),
                    _c("strong", [_vm._v("£5,799")]),
                  ]),
                ]),
              ]),
            ]),
            _c("p", { staticClass: "pricost-content readmore" }, [
              _vm._v(
                " Our venue-only hire includes tables/chairs. You choose from our list of six caterers. Alternatively, our packages include a Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident. "
              ),
              _c("span", { staticClass: "btn-link" }, [_vm._v("Read More")]),
            ]),
          ]),
        ]),
        _c("div", { staticClass: "col-md-6 m-b20" }, [
          _c("div", { staticClass: "pricost-box" }, [
            _c("h5", { staticClass: "pricost-title" }, [
              _c("i", { staticClass: "la la-institution" }),
              _vm._v("In-house catering "),
              _c("span", [_vm._v("(Price Per Head)")]),
            ]),
            _c("div", { staticClass: "card-bx green bordered" }, [
              _c("div", { staticClass: "inner" }, [
                _c("ul", { staticClass: "deal-list" }, [
                  _c("li", [
                    _c("span", [_vm._v("Prices Start At")]),
                    _c("strong", [_vm._v("£2,999")]),
                  ]),
                  _c("li", [
                    _c("span", [_vm._v("Prices Start At")]),
                    _c("strong", [_vm._v("£5,799")]),
                  ]),
                ]),
              ]),
            ]),
            _c("p", { staticClass: "pricost-content" }, [
              _vm._v(
                " Our venue-only hire includes tables/chairs. You choose from our list of six caterers. Alternatively, our packages include a "
              ),
              _c("span", { staticClass: "collapse", attrs: { id: "dec4" } }, [
                _vm._v(
                  "Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident."
                ),
              ]),
              _c(
                "a",
                {
                  staticClass: "btn-link",
                  attrs: {
                    "data-toggle": "collapse",
                    href: "#dec4",
                    role: "button",
                    "aria-expanded": "false",
                    "aria-controls": "collapseExample",
                  },
                },
                [_vm._v(" Read More ")]
              ),
            ]),
          ]),
        ]),
        _c("div", { staticClass: "col-md-6 m-b20" }, [
          _c("div", { staticClass: "pricost-box" }, [
            _c("h5", { staticClass: "pricost-title" }, [
              _c("i", { staticClass: "la la-gift" }),
              _vm._v("Packages "),
            ]),
            _c("div", { staticClass: "card-bx yellow bordered" }, [
              _c("div", { staticClass: "inner" }, [
                _c("ul", { staticClass: "deal-list" }, [
                  _c("li", [
                    _c("span", [_vm._v("Prices Start At")]),
                    _c("strong", [_vm._v("£2,999")]),
                  ]),
                  _c("li", [
                    _c("span", [_vm._v("Prices Start At")]),
                    _c("strong", [_vm._v("£5,799")]),
                  ]),
                ]),
              ]),
            ]),
            _c("p", { staticClass: "pricost-content" }, [
              _vm._v(
                " Our venue-only hire includes tables/chairs. You choose from our list of six caterers. Alternatively, our packages include a "
              ),
              _c("span", { staticClass: "collapse", attrs: { id: "dec3" } }, [
                _vm._v(
                  "Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident."
                ),
              ]),
              _c(
                "a",
                {
                  staticClass: "btn-link",
                  attrs: {
                    "data-toggle": "collapse",
                    href: "#dec3",
                    role: "button",
                    "aria-expanded": "false",
                    "aria-controls": "collapseExample",
                  },
                },
                [_vm._v(" Read More ")]
              ),
            ]),
          ]),
        ]),
        _c("div", { staticClass: "col-md-6 m-b20" }, [
          _c("div", { staticClass: "pricost-box" }, [
            _c("h5", { staticClass: "pricost-title" }, [
              _c("i", { staticClass: "la la-gift" }),
              _vm._v("Venue Hire Only "),
            ]),
            _c("div", { staticClass: "card-bx blue bordered" }, [
              _c("div", { staticClass: "inner" }, [
                _c("ul", { staticClass: "deal-list" }, [
                  _c("li", [
                    _c("span", [_vm._v("Prices Start At")]),
                    _c("strong", [_vm._v("£2,999")]),
                  ]),
                  _c("li", [
                    _c("span", [_vm._v("Prices Start At")]),
                    _c("strong", [_vm._v("£5,799")]),
                  ]),
                ]),
              ]),
            ]),
            _c("p", { staticClass: "pricost-content" }, [
              _vm._v(
                " Our venue-only hire includes tables/chairs. You choose from our list of six caterers. Alternatively, our packages include a "
              ),
              _c("span", { staticClass: "collapse", attrs: { id: "dec2" } }, [
                _vm._v(
                  "Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident."
                ),
              ]),
              _c(
                "a",
                {
                  staticClass: "btn-link",
                  attrs: {
                    "data-toggle": "collapse",
                    href: "#dec2",
                    role: "button",
                    "aria-expanded": "false",
                    "aria-controls": "collapseExample",
                  },
                },
                [_vm._v(" Read More ")]
              ),
            ]),
          ]),
        ]),
      ]),
      _c(
        "a",
        {
          staticClass: "btn gradient",
          attrs: {
            href: "javascript:;",
            "data-toggle": "modal",
            "data-target": "#exampleModal2",
          },
        },
        [_vm._v("Request a quote")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row sp20" }, [
      _c("div", { staticClass: "col-md-6 m-b20" }, [
        _c("div", { staticClass: "card-bx border-bx white" }, [
          _c("div", { staticClass: "iconbx" }, [
            _c("i", { staticClass: "la la-home" }),
          ]),
          _c("div", { staticClass: "inner" }, [
            _c("ul", { staticClass: "deal-list" }, [
              _c("li", [
                _c("span", [_vm._v("Prices Start At")]),
                _c("strong", [_vm._v("£2,999")]),
              ]),
            ]),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "col-md-6 m-b20" }, [
        _c("div", { staticClass: "card-bx border-bx white" }, [
          _c("div", { staticClass: "iconbx" }, [
            _c("i", { staticClass: "la la-clock-o" }),
          ]),
          _c("div", { staticClass: "inner" }, [
            _c("ul", { staticClass: "deal-list" }, [
              _c("li", [
                _c("span", [_vm._v("Prices Start At")]),
                _c("strong", [_vm._v("£2,999")]),
              ]),
              _c("li", [
                _c("span", [_vm._v("Prices Start At")]),
                _c("strong", [_vm._v("£5,799")]),
              ]),
            ]),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "col-md-6 m-b20" }, [
        _c("div", { staticClass: "card-bx border-bx white" }, [
          _c("div", { staticClass: "iconbx" }, [
            _c("i", { staticClass: "la la-users" }),
          ]),
          _c("div", { staticClass: "inner" }, [
            _c("ul", { staticClass: "deal-list" }, [
              _c("li", [
                _c("span", [_vm._v("Prices Start At")]),
                _c("strong", [_vm._v("£2,999")]),
              ]),
              _c("li", [
                _c("span", [_vm._v("Prices Start At")]),
                _c("strong", [_vm._v("£5,799")]),
              ]),
              _c("li", [
                _c("span", [_vm._v("Prices Start At")]),
                _c("strong", [_vm._v("£5,799")]),
              ]),
            ]),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "col-md-6 m-b20" }, [
        _c("div", { staticClass: "card-bx border-bx white" }, [
          _c("div", { staticClass: "iconbx" }, [
            _c("i", { staticClass: "la la-bed" }),
          ]),
          _c("div", { staticClass: "inner" }, [
            _c("ul", { staticClass: "deal-list" }, [
              _c("li", [
                _c("span", [_vm._v("Prices Start At")]),
                _c("strong", [_vm._v("£2,999")]),
              ]),
              _c("li", [
                _c("span", [_vm._v("Prices Start At")]),
                _c("strong", [_vm._v("£5,799")]),
              ]),
            ]),
          ]),
        ]),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "inner-content-bx" }, [
      _c("div", { staticClass: "details-list" }, [
        _c("h5", { staticClass: "title" }, [_vm._v("Products and Services")]),
        _c("ul", { staticClass: "list-check primary clearfix list-2" }, [
          _c("li", [_vm._v("Wedding Hall")]),
          _c("li", [_vm._v("Dining")]),
          _c("li", [_vm._v("Liability Insurance")]),
          _c("li", [_vm._v("In House Catering")]),
          _c("li", [_vm._v("Dining")]),
          _c("li", [_vm._v("DJ Facilities")]),
          _c("li", [_vm._v("Personal Chef")]),
          _c("li", [_vm._v("Guest Parking")]),
          _c("li", [_vm._v("Seating Amenities")]),
          _c("li", [_vm._v("Parking")]),
        ]),
      ]),
      _c("div", { staticClass: "details-list" }, [
        _c("h5", { staticClass: "title" }, [_vm._v("Photography Style")]),
        _c("ul", { staticClass: "list-check primary clearfix list-2" }, [
          _c("li", [_vm._v("Wedding Hall")]),
          _c("li", [_vm._v("Dining")]),
          _c("li", [_vm._v("Liability Insurance")]),
          _c("li", [_vm._v("In House Catering")]),
          _c("li", [_vm._v("Dining")]),
          _c("li", [_vm._v("DJ Facilities")]),
          _c("li", [_vm._v("Personal Chef")]),
          _c("li", [_vm._v("Guest Parking")]),
          _c("li", [_vm._v("Seating Amenities")]),
          _c("li", [_vm._v("Parking")]),
        ]),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("h5", { staticClass: "details-title" }, [
      _vm._v(" Reviews (8) "),
      _c(
        "button",
        {
          staticClass: "btn btn-sm float-right",
          attrs: {
            type: "button",
            "data-toggle": "modal",
            "data-target": "#writeReviews",
          },
        },
        [_vm._v(" + Add a review ")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "no-review" }, [
      _c("img", { attrs: { src: "images/icon/no-review1.png", alt: "" } }),
      _c("h4", { staticClass: "title" }, [_vm._v("No Review Yet")]),
      _c("p", [
        _vm._v(
          " Be the first one to tell everyone about the experience you,ve had with this supplier "
        ),
      ]),
      _c(
        "button",
        {
          staticClass: "btn green",
          attrs: {
            type: "button",
            "data-toggle": "modal",
            "data-target": "#writeReviews",
          },
        },
        [_vm._v(" + Add a review ")]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "venues-reviews-box" }, [
      _c("div", { staticClass: "venues-reviews" }, [
        _c("div", { staticClass: "reviews-info" }, [
          _c("div", { staticClass: "reviews-user" }, [
            _c("h6", { staticClass: "reviewer-name" }, [_vm._v("Fran & Josh")]),
            _c("h6", { staticClass: "wedding-date" }, [
              _vm._v(" Married in November 2018 "),
            ]),
          ]),
          _c("div", { staticClass: "reviews-rating" }, [
            _c("ul", { staticClass: "rating" }, [
              _c("li", [_c("i", { staticClass: "fa fa-star" })]),
              _c("li", [_c("i", { staticClass: "fa fa-star" })]),
              _c("li", [_c("i", { staticClass: "fa fa-star" })]),
              _c("li", [_c("i", { staticClass: "fa fa-star" })]),
              _c("li", [_c("i", { staticClass: "fa fa-star" })]),
            ]),
            _c("h6", { staticClass: "review-date" }, [_vm._v("January 2019")]),
          ]),
        ]),
        _c("div", { staticClass: "reviews-content" }, [
          _c("div", { staticClass: "review-media" }, [
            _c("img", { attrs: { src: "images/review/thum3.jpg", alt: "" } }),
          ]),
          _c("h5", { staticClass: "title" }, [
            _vm._v("The best photographer!!!"),
          ]),
          _c("p", [
            _vm._v(
              " The best photographer any bride ( especially one who does not like her photo being taken!) could ask for! Can not thank you enough Chanon. "
            ),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "venues-reviews" }, [
        _c("div", { staticClass: "reviews-info" }, [
          _c("div", { staticClass: "reviews-user" }, [
            _c("h6", { staticClass: "reviewer-name" }, [_vm._v("Fran & Josh")]),
            _c("h6", { staticClass: "wedding-date" }, [
              _vm._v(" Married in November 2018 "),
            ]),
          ]),
          _c("div", { staticClass: "reviews-rating" }, [
            _c("ul", { staticClass: "rating" }, [
              _c("li", [_c("i", { staticClass: "fa fa-star" })]),
              _c("li", [_c("i", { staticClass: "fa fa-star" })]),
              _c("li", [_c("i", { staticClass: "fa fa-star" })]),
              _c("li", [_c("i", { staticClass: "fa fa-star" })]),
              _c("li", [_c("i", { staticClass: "fa fa-star" })]),
            ]),
            _c("h6", { staticClass: "review-date" }, [_vm._v("January 2019")]),
          ]),
        ]),
        _c("div", { staticClass: "reviews-content" }, [
          _c("div", { staticClass: "review-media" }, [
            _c("img", { attrs: { src: "images/review/thum1.jpg", alt: "" } }),
          ]),
          _c("h5", { staticClass: "title" }, [
            _vm._v("The best photographer!!!"),
          ]),
          _c("p", [
            _vm._v(
              " The best photographer any bride ( especially one who does not like her photo being taken!) could ask for! Can not thank you enough Chanon. "
            ),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "venues-reviews" }, [
        _c("div", { staticClass: "reviews-info" }, [
          _c("div", { staticClass: "reviews-user" }, [
            _c("h6", { staticClass: "reviewer-name" }, [_vm._v("Fran & Josh")]),
            _c("h6", { staticClass: "wedding-date" }, [
              _vm._v(" Married in November 2018 "),
            ]),
          ]),
          _c("div", { staticClass: "reviews-rating" }, [
            _c("ul", { staticClass: "rating" }, [
              _c("li", [_c("i", { staticClass: "fa fa-star" })]),
              _c("li", [_c("i", { staticClass: "fa fa-star" })]),
              _c("li", [_c("i", { staticClass: "fa fa-star" })]),
              _c("li", [_c("i", { staticClass: "fa fa-star" })]),
              _c("li", [_c("i", { staticClass: "fa fa-star" })]),
            ]),
            _c("h6", { staticClass: "review-date" }, [_vm._v("January 2019")]),
          ]),
        ]),
        _c("div", { staticClass: "reviews-content" }, [
          _c("h5", { staticClass: "title" }, [
            _vm._v("The best photographer!!!"),
          ]),
          _c("p", [
            _vm._v(
              " The best photographer any bride ( especially one who does not like her photo being taken!) could ask for! Can not thank you enough Chanon. "
            ),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "pagination-bx m-b30" }, [
        _c("ul", { staticClass: "pagination" }, [
          _c("li", { staticClass: "previous" }, [
            _c("a", { attrs: { href: "javascript:void(0);" } }, [
              _c("i", { staticClass: "ti-arrow-left" }),
            ]),
          ]),
          _c("li", { staticClass: "active" }, [
            _c("a", { attrs: { href: "#" } }, [_vm._v("1")]),
          ]),
          _c("li", [
            _c("a", { attrs: { href: "javascript:void(0);" } }, [_vm._v("2")]),
          ]),
          _c("li", [
            _c("a", { attrs: { href: "javascript:void(0);" } }, [_vm._v("3")]),
          ]),
          _c("li", { staticClass: "next" }, [
            _c("a", { attrs: { href: "javascript:void(0);" } }, [
              _c("i", { staticClass: "ti-arrow-right" }),
            ]),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "card-bx yellow afnone bordered m-b30" }, [
        _c("div", { staticClass: "inner" }, [
          _c("span", { staticClass: "tag-btn pull-right" }, [
            _vm._v("Our Autumn Open Evening"),
          ]),
          _c("h6", { staticClass: "title" }, [
            _vm._v(" Wedding Manager Couple Discount "),
          ]),
          _c("p", [
            _vm._v(
              " Always an enjoyable event! The Barn will be set up for a wedding - come and enjoy wandering around the Barn and our beautiful gardens with a glass of fizz in hand! 6pm-9pm. "
            ),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "text-center m-b30" }, [
        _c(
          "a",
          {
            staticClass: "btn",
            attrs: {
              href: "javascript:;",
              "data-toggle": "modal",
              "data-target": "#contactSupplier",
            },
          },
          [
            _c("i", { staticClass: "fa fa-envelope-o" }),
            _c("span", [_vm._v("Book your place")]),
          ]
        ),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "collapse", attrs: { id: "map" } }, [
      _c("div", { staticClass: "card card-body m-b30" }, [
        _c("iframe", {
          staticClass: "align-self-stretch",
          staticStyle: { border: "0", width: "100%", "min-height": "350px" },
          attrs: {
            src: "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d227748.3825624477!2d75.65046970649679!3d26.88544791796718!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x396c4adf4c57e281%3A0xce1c63a0cf22e09!2sJaipur%2C+Rajasthan!5e0!3m2!1sen!2sin!4v1500819483219",
            allowfullscreen: "",
          },
        }),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "location-details" }, [
      _c("ul", { staticClass: "info-bx" }, [
        _c("li", [
          _c("a", { attrs: { href: "" } }, [
            _c("i", { staticClass: "la la-laptop" }),
            _vm._v("Website"),
          ]),
        ]),
        _c("li", [
          _c("a", { attrs: { href: "" } }, [
            _c("i", { staticClass: "la la-envelope" }),
            _vm._v("Email"),
          ]),
        ]),
        _c("li", [
          _c("a", { attrs: { href: "" } }, [
            _c("i", { staticClass: "la la-phone" }),
            _vm._v("01787374544"),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "row" }, [
        _c("div", { staticClass: "col-lg-6 m-b20" }, [
          _c("h5", { staticClass: "title" }, [_vm._v("Address")]),
          _c("p", [
            _vm._v(" Smeetham Hall Lane, Sudbury, Essex, CO10 7EU, England "),
          ]),
        ]),
        _c("div", { staticClass: "col-lg-6 m-b20" }, [
          _c("h5", { staticClass: "title" }, [_vm._v("Travel Notes")]),
          _c("p", [
            _vm._v(" Please go to the map on our website: info@example.com "),
          ]),
        ]),
        _c("div", { staticClass: "col-lg-6 m-b20" }, [
          _c("h5", { staticClass: "title" }, [
            _vm._v("Nearest Motorway & Junction"),
          ]),
          _c("p", [_vm._v("M11/A12/A120")]),
        ]),
        _c("div", { staticClass: "col-lg-6 m-b20" }, [
          _c("h5", { staticClass: "title" }, [_vm._v("Nearest Train Station")]),
          _c("p", [_vm._v("Sudbury")]),
        ]),
        _c("div", { staticClass: "col-lg-6 m-b20" }, [
          _c("h5", { staticClass: "title" }, [_vm._v("Nearest Town`")]),
          _c("p", [_vm._v("Sudbury")]),
        ]),
        _c("div", { staticClass: "col-lg-6 m-b20" }, [
          _c("h5", { staticClass: "title" }, [_vm._v("Nearest Airport")]),
          _c("p", [_vm._v("Stansted")]),
        ]),
      ]),
      _c("div", { staticClass: "follow-supplier" }, [
        _c("h5", { staticClass: "title m-b20" }, [
          _vm._v("Follow This Supplier On"),
        ]),
        _c("ul", { staticClass: "list-inline" }, [
          _c("li", [
            _c(
              "a",
              {
                staticClass: "btn outline-2 outline facebook circle",
                attrs: { href: "javascript:void(0);" },
              },
              [_c("i", { staticClass: "fa fa-facebook" })]
            ),
          ]),
          _c("li", [
            _c(
              "a",
              {
                staticClass: "btn outline-2 outline google-plus circle",
                attrs: { href: "javascript:void(0);" },
              },
              [_c("i", { staticClass: "fa fa-google-plus" })]
            ),
          ]),
          _c("li", [
            _c(
              "a",
              {
                staticClass: "btn outline-2 outline linkedin circle",
                attrs: { href: "javascript:void(0);" },
              },
              [_c("i", { staticClass: "fa fa-linkedin" })]
            ),
          ]),
          _c("li", [
            _c(
              "a",
              {
                staticClass: "btn outline-2 outline instagram circle",
                attrs: { href: "javascript:void(0);" },
              },
              [_c("i", { staticClass: "fa fa-instagram" })]
            ),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "text-center m-b30" }, [
        _c(
          "a",
          {
            staticClass: "btn",
            attrs: {
              href: "javascript:;",
              "data-toggle": "modal",
              "data-target": "#contactSupplier",
            },
          },
          [
            _c("i", { staticClass: "fa fa-envelope-o" }),
            _c("span", [_vm._v("Contact venue")]),
          ]
        ),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "pressawards" }, [
      _c("div", { staticClass: "row" }, [
        _c("div", { staticClass: "col-lg-6" }, [
          _c("div", { staticClass: "press-bx" }, [
            _c("h6", { staticClass: "title" }, [
              _c("i", { staticClass: "fa fa-quote-left" }),
              _vm._v(" Press & Awards "),
              _c("span", [_vm._v("(1)")]),
            ]),
            _c("p", [_vm._v("Don't Tell the Bride")]),
            _c("a", { attrs: { href: "#" } }, [
              _vm._v(
                "Wedding Venue of the Year 2018 - Countryside, East of England"
              ),
            ]),
            _c("a", { attrs: { href: "#" } }, [
              _vm._v(
                "Wedding Venue of the Year - Something Different - Essex Wedding Awards 2017/2018"
              ),
            ]),
          ]),
        ]),
        _c("div", { staticClass: "col-lg-6" }, [
          _c("div", { staticClass: "press-bx" }, [
            _c("h6", { staticClass: "title" }, [
              _c("i", { staticClass: "fa fa-trophy" }),
              _vm._v(" Industry Awards "),
              _c("span", [_vm._v("(4)")]),
            ]),
            _c("p", [_vm._v("Don't Tell the Bride")]),
            _c("a", { attrs: { href: "#" } }, [
              _vm._v(
                "Wedding Venue of the Year 2018 - Countryside, East of England"
              ),
            ]),
            _c("a", { attrs: { href: "#" } }, [
              _vm._v(
                "Wedding Venue of the Year - Something Different - Essex Wedding Awards 2017/2018"
              ),
            ]),
          ]),
        ]),
        _c("div", { staticClass: "col-lg-6" }, [
          _c("div", { staticClass: "press-bx" }, [
            _c("h6", { staticClass: "title" }, [
              _c("i", { staticClass: "fa fa-quote-left" }),
              _vm._v(" Press & Awards "),
              _c("span", [_vm._v("(1)")]),
            ]),
            _c("p", [_vm._v("Don't Tell the Bride")]),
            _c("a", { attrs: { href: "#" } }, [
              _vm._v(
                "Wedding Venue of the Year 2018 - Countryside, East of England"
              ),
            ]),
            _c("a", { attrs: { href: "#" } }, [
              _vm._v(
                "Wedding Venue of the Year - Something Different - Essex Wedding Awards 2017/2018"
              ),
            ]),
          ]),
        ]),
        _c("div", { staticClass: "col-lg-6" }, [
          _c("div", { staticClass: "press-bx" }, [
            _c("h6", { staticClass: "title" }, [
              _c("i", { staticClass: "fa fa-trophy" }),
              _vm._v(" Industry Awards "),
              _c("span", [_vm._v("(4)")]),
            ]),
            _c("p", [_vm._v("Don't Tell the Bride")]),
            _c("a", { attrs: { href: "#" } }, [
              _vm._v(
                "Wedding Venue of the Year 2018 - Countryside, East of England"
              ),
            ]),
            _c("a", { attrs: { href: "#" } }, [
              _vm._v(
                "Wedding Venue of the Year - Something Different - Essex Wedding Awards 2017/2018"
              ),
            ]),
          ]),
        ]),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      {
        staticClass: "accordion form-accordion details-accordion",
        attrs: { id: "accordionExample" },
      },
      [
        _c("div", { staticClass: "card" }, [
          _c(
            "div",
            { staticClass: "card-header", attrs: { id: "headingOne" } },
            [
              _c(
                "a",
                {
                  staticClass: "collapsed",
                  attrs: {
                    href: "javascript:;",
                    "data-toggle": "collapse",
                    "data-target": "#collapseOne",
                    "aria-expanded": "false",
                    "aria-controls": "collapseOne",
                  },
                },
                [_vm._v(" Photo (56) ")]
              ),
            ]
          ),
          _c(
            "div",
            {
              staticClass: "collapse",
              attrs: {
                id: "collapseOne",
                "aria-labelledby": "headingOne",
                "data-parent": "#accordionExample",
              },
            },
            [
              _c("div", { staticClass: "card-body" }, [
                _c(
                  "div",
                  {
                    staticClass:
                      "widget widget_gallery mb-0 gallery-grid-8 lightgallery",
                  },
                  [
                    _c("ul", [
                      _c("li", { staticClass: "img-effect2" }, [
                        _c(
                          "span",
                          {
                            staticClass: "check-km",
                            attrs: {
                              "data-exthumbimage": "images/gallery/pic1.jpg",
                              "data-src": "images/gallery/pic1.jpg",
                              title: "Title Come Here",
                            },
                          },
                          [
                            _c(
                              "a",
                              { attrs: { href: "javascript:void(0);" } },
                              [
                                _c("img", {
                                  attrs: {
                                    src: "images/gallery/pic1.jpg",
                                    alt: "",
                                  },
                                }),
                              ]
                            ),
                          ]
                        ),
                      ]),
                      _c("li", { staticClass: "img-effect2" }, [
                        _c(
                          "span",
                          {
                            staticClass: "check-km",
                            attrs: {
                              "data-exthumbimage": "images/gallery/pic2.jpg",
                              "data-src": "images/gallery/pic2.jpg",
                              title: "Title Come Here",
                            },
                          },
                          [
                            _c(
                              "a",
                              { attrs: { href: "javascript:void(0);" } },
                              [
                                _c("img", {
                                  attrs: {
                                    src: "images/gallery/pic2.jpg",
                                    alt: "",
                                  },
                                }),
                              ]
                            ),
                          ]
                        ),
                      ]),
                      _c("li", { staticClass: "img-effect2" }, [
                        _c(
                          "span",
                          {
                            staticClass: "check-km",
                            attrs: {
                              "data-exthumbimage": "images/gallery/pic3.jpg",
                              "data-src": "images/gallery/pic3.jpg",
                              title: "Title Come Here",
                            },
                          },
                          [
                            _c(
                              "a",
                              { attrs: { href: "javascript:void(0);" } },
                              [
                                _c("img", {
                                  attrs: {
                                    src: "images/gallery/pic3.jpg",
                                    alt: "",
                                  },
                                }),
                              ]
                            ),
                          ]
                        ),
                      ]),
                      _c("li", { staticClass: "img-effect2" }, [
                        _c(
                          "span",
                          {
                            staticClass: "check-km",
                            attrs: {
                              "data-exthumbimage": "images/gallery/pic4.jpg",
                              "data-src": "images/gallery/pic4.jpg",
                              title: "Title Come Here",
                            },
                          },
                          [
                            _c(
                              "a",
                              { attrs: { href: "javascript:void(0);" } },
                              [
                                _c("img", {
                                  attrs: {
                                    src: "images/gallery/pic4.jpg",
                                    alt: "",
                                  },
                                }),
                              ]
                            ),
                          ]
                        ),
                      ]),
                      _c("li", { staticClass: "img-effect2" }, [
                        _c(
                          "span",
                          {
                            staticClass: "check-km",
                            attrs: {
                              "data-exthumbimage": "images/gallery/pic5.jpg",
                              "data-src": "images/gallery/pic5.jpg",
                              title: "Title Come Here",
                            },
                          },
                          [
                            _c(
                              "a",
                              { attrs: { href: "javascript:void(0);" } },
                              [
                                _c("img", {
                                  attrs: {
                                    src: "images/gallery/pic5.jpg",
                                    alt: "",
                                  },
                                }),
                              ]
                            ),
                          ]
                        ),
                      ]),
                      _c("li", { staticClass: "img-effect2" }, [
                        _c(
                          "span",
                          {
                            staticClass: "check-km",
                            attrs: {
                              "data-exthumbimage": "images/gallery/pic6.jpg",
                              "data-src": "images/gallery/pic6.jpg",
                              title: "Title Come Here",
                            },
                          },
                          [
                            _c(
                              "a",
                              { attrs: { href: "javascript:void(0);" } },
                              [
                                _c("img", {
                                  attrs: {
                                    src: "images/gallery/pic6.jpg",
                                    alt: "",
                                  },
                                }),
                              ]
                            ),
                          ]
                        ),
                      ]),
                      _c("li", { staticClass: "img-effect2" }, [
                        _c(
                          "span",
                          {
                            staticClass: "check-km",
                            attrs: {
                              "data-exthumbimage": "images/gallery/pic7.jpg",
                              "data-src": "images/gallery/pic7.jpg",
                              title: "Title Come Here",
                            },
                          },
                          [
                            _c(
                              "a",
                              { attrs: { href: "javascript:void(0);" } },
                              [
                                _c("img", {
                                  attrs: {
                                    src: "images/gallery/pic7.jpg",
                                    alt: "",
                                  },
                                }),
                              ]
                            ),
                          ]
                        ),
                      ]),
                      _c("li", { staticClass: "img-effect2" }, [
                        _c(
                          "span",
                          {
                            staticClass: "check-km",
                            attrs: {
                              "data-exthumbimage": "images/gallery/pic8.jpg",
                              "data-src": "images/gallery/pic8.jpg",
                              title: "Title Come Here",
                            },
                          },
                          [
                            _c(
                              "a",
                              { attrs: { href: "javascript:void(0);" } },
                              [
                                _c("img", {
                                  attrs: {
                                    src: "images/gallery/pic8.jpg",
                                    alt: "",
                                  },
                                }),
                              ]
                            ),
                          ]
                        ),
                      ]),
                      _c("li", { staticClass: "img-effect2" }, [
                        _c(
                          "span",
                          {
                            staticClass: "check-km",
                            attrs: {
                              "data-exthumbimage": "images/gallery/pic9.jpg",
                              "data-src": "images/gallery/pic9.jpg",
                              title: "Title Come Here",
                            },
                          },
                          [
                            _c(
                              "a",
                              { attrs: { href: "javascript:void(0);" } },
                              [
                                _c("img", {
                                  attrs: {
                                    src: "images/gallery/pic9.jpg",
                                    alt: "",
                                  },
                                }),
                              ]
                            ),
                          ]
                        ),
                      ]),
                      _c("li", { staticClass: "img-effect2" }, [
                        _c(
                          "span",
                          {
                            staticClass: "check-km",
                            attrs: {
                              "data-exthumbimage": "images/gallery/pic1.jpg",
                              "data-src": "images/gallery/pic1.jpg",
                              title: "Title Come Here",
                            },
                          },
                          [
                            _c(
                              "a",
                              { attrs: { href: "javascript:void(0);" } },
                              [
                                _c("img", {
                                  attrs: {
                                    src: "images/gallery/pic1.jpg",
                                    alt: "",
                                  },
                                }),
                              ]
                            ),
                          ]
                        ),
                      ]),
                      _c("li", { staticClass: "img-effect2" }, [
                        _c(
                          "span",
                          {
                            staticClass: "check-km",
                            attrs: {
                              "data-exthumbimage": "images/gallery/pic2.jpg",
                              "data-src": "images/gallery/pic2.jpg",
                              title: "Title Come Here",
                            },
                          },
                          [
                            _c(
                              "a",
                              { attrs: { href: "javascript:void(0);" } },
                              [
                                _c("img", {
                                  attrs: {
                                    src: "images/gallery/pic2.jpg",
                                    alt: "",
                                  },
                                }),
                              ]
                            ),
                          ]
                        ),
                      ]),
                      _c("li", { staticClass: "img-effect2" }, [
                        _c(
                          "span",
                          {
                            staticClass: "check-km",
                            attrs: {
                              "data-exthumbimage": "images/gallery/pic3.jpg",
                              "data-src": "images/gallery/pic3.jpg",
                              title: "Title Come Here",
                            },
                          },
                          [
                            _c(
                              "a",
                              { attrs: { href: "javascript:void(0);" } },
                              [
                                _c("img", {
                                  attrs: {
                                    src: "images/gallery/pic3.jpg",
                                    alt: "",
                                  },
                                }),
                              ]
                            ),
                          ]
                        ),
                      ]),
                      _c("li", { staticClass: "img-effect2" }, [
                        _c(
                          "span",
                          {
                            staticClass: "check-km",
                            attrs: {
                              "data-exthumbimage": "images/gallery/pic4.jpg",
                              "data-src": "images/gallery/pic4.jpg",
                              title: "Title Come Here",
                            },
                          },
                          [
                            _c(
                              "a",
                              { attrs: { href: "javascript:void(0);" } },
                              [
                                _c("img", {
                                  attrs: {
                                    src: "images/gallery/pic4.jpg",
                                    alt: "",
                                  },
                                }),
                              ]
                            ),
                          ]
                        ),
                      ]),
                      _c("li", { staticClass: "img-effect2" }, [
                        _c(
                          "span",
                          {
                            staticClass: "check-km",
                            attrs: {
                              "data-exthumbimage": "images/gallery/pic6.jpg",
                              "data-src": "images/gallery/pic6.jpg",
                              title: "Title Come Here",
                            },
                          },
                          [
                            _c(
                              "a",
                              { attrs: { href: "javascript:void(0);" } },
                              [
                                _c("img", {
                                  attrs: {
                                    src: "images/gallery/pic6.jpg",
                                    alt: "",
                                  },
                                }),
                              ]
                            ),
                          ]
                        ),
                      ]),
                      _c("li", { staticClass: "img-effect2" }, [
                        _c(
                          "span",
                          {
                            staticClass: "check-km",
                            attrs: {
                              "data-exthumbimage": "images/gallery/pic7.jpg",
                              "data-src": "images/gallery/pic7.jpg",
                              title: "Title Come Here",
                            },
                          },
                          [
                            _c(
                              "a",
                              { attrs: { href: "javascript:void(0);" } },
                              [
                                _c("img", {
                                  attrs: {
                                    src: "images/gallery/pic7.jpg",
                                    alt: "",
                                  },
                                }),
                              ]
                            ),
                          ]
                        ),
                      ]),
                      _c("li", { staticClass: "img-effect2" }, [
                        _c(
                          "span",
                          {
                            staticClass: "check-km",
                            attrs: {
                              "data-exthumbimage": "images/gallery/pic8.jpg",
                              "data-src": "images/gallery/pic8.jpg",
                              title: "Title Come Here",
                            },
                          },
                          [
                            _c(
                              "a",
                              { attrs: { href: "javascript:void(0);" } },
                              [
                                _c("img", {
                                  attrs: {
                                    src: "images/gallery/pic8.jpg",
                                    alt: "",
                                  },
                                }),
                              ]
                            ),
                          ]
                        ),
                      ]),
                    ]),
                  ]
                ),
              ]),
            ]
          ),
        ]),
        _c("div", { staticClass: "card" }, [
          _c(
            "div",
            { staticClass: "card-header", attrs: { id: "headingThree" } },
            [
              _c(
                "a",
                {
                  staticClass: "collapsed",
                  attrs: {
                    href: "javascript:;",
                    "data-toggle": "collapse",
                    "data-target": "#collapseThree",
                    "aria-expanded": "false",
                    "aria-controls": "collapseThree",
                  },
                },
                [_vm._v(" Videos (2) ")]
              ),
            ]
          ),
          _c(
            "div",
            {
              staticClass: "collapse",
              attrs: {
                id: "collapseThree",
                "aria-labelledby": "headingThree",
                "data-parent": "#accordionExample",
              },
            },
            [
              _c("div", { staticClass: "card-body" }, [
                _c(
                  "div",
                  {
                    staticClass:
                      "widget widget_gallery widget_video mb-0 gallery-grid-4",
                  },
                  [
                    _c("ul", [
                      _c("li", [
                        _c("div", { staticClass: "video-frame" }, [
                          _c("img", {
                            attrs: { src: "images/gallery/pic1.jpg", alt: "" },
                          }),
                          _c(
                            "a",
                            {
                              staticClass: "popup-youtube video",
                              attrs: {
                                href: "https://www.youtube.com/watch?v=Dj6CKxQue7U",
                              },
                            },
                            [_c("i", { staticClass: "fa fa-play" })]
                          ),
                        ]),
                      ]),
                      _c("li", [
                        _c("div", { staticClass: "video-frame" }, [
                          _c("img", {
                            attrs: { src: "images/gallery/pic2.jpg", alt: "" },
                          }),
                          _c(
                            "a",
                            {
                              staticClass: "popup-youtube video",
                              attrs: {
                                href: "https://www.youtube.com/watch?v=Dj6CKxQue7U",
                              },
                            },
                            [_c("i", { staticClass: "fa fa-play" })]
                          ),
                        ]),
                      ]),
                      _c("li", [
                        _c("div", { staticClass: "video-frame" }, [
                          _c("img", {
                            attrs: { src: "images/gallery/pic3.jpg", alt: "" },
                          }),
                          _c(
                            "a",
                            {
                              staticClass: "popup-youtube video",
                              attrs: {
                                href: "https://www.youtube.com/watch?v=Dj6CKxQue7U",
                              },
                            },
                            [_c("i", { staticClass: "fa fa-play" })]
                          ),
                        ]),
                      ]),
                      _c("li", [
                        _c("div", { staticClass: "video-frame" }, [
                          _c("img", {
                            attrs: { src: "images/gallery/pic4.jpg", alt: "" },
                          }),
                          _c(
                            "a",
                            {
                              staticClass: "popup-youtube video",
                              attrs: {
                                href: "https://www.youtube.com/watch?v=Dj6CKxQue7U",
                              },
                            },
                            [_c("i", { staticClass: "fa fa-play" })]
                          ),
                        ]),
                      ]),
                      _c("li", [
                        _c("div", { staticClass: "video-frame" }, [
                          _c("img", {
                            attrs: { src: "images/gallery/pic5.jpg", alt: "" },
                          }),
                          _c(
                            "a",
                            {
                              staticClass: "popup-youtube video",
                              attrs: {
                                href: "https://www.youtube.com/watch?v=Dj6CKxQue7U",
                              },
                            },
                            [_c("i", { staticClass: "fa fa-play" })]
                          ),
                        ]),
                      ]),
                      _c("li", [
                        _c("div", { staticClass: "video-frame" }, [
                          _c("img", {
                            attrs: { src: "images/gallery/pic6.jpg", alt: "" },
                          }),
                          _c(
                            "a",
                            {
                              staticClass: "popup-youtube video",
                              attrs: {
                                href: "https://www.youtube.com/watch?v=Dj6CKxQue7U",
                              },
                            },
                            [_c("i", { staticClass: "fa fa-play" })]
                          ),
                        ]),
                      ]),
                      _c("li", [
                        _c("div", { staticClass: "video-frame" }, [
                          _c("img", {
                            attrs: { src: "images/gallery/pic7.jpg", alt: "" },
                          }),
                          _c(
                            "a",
                            {
                              staticClass: "popup-youtube video",
                              attrs: {
                                href: "https://www.youtube.com/watch?v=Dj6CKxQue7U",
                              },
                            },
                            [_c("i", { staticClass: "fa fa-play" })]
                          ),
                        ]),
                      ]),
                      _c("li", [
                        _c("div", { staticClass: "video-frame" }, [
                          _c("img", {
                            attrs: { src: "images/gallery/pic8.jpg", alt: "" },
                          }),
                          _c(
                            "a",
                            {
                              staticClass: "popup-youtube video",
                              attrs: {
                                href: "https://www.youtube.com/watch?v=Dj6CKxQue7U",
                              },
                            },
                            [_c("i", { staticClass: "fa fa-play" })]
                          ),
                        ]),
                      ]),
                    ]),
                  ]
                ),
              ]),
            ]
          ),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "preferred-supplier" }, [
      _c(
        "div",
        { staticClass: "item4 owl-carousel owl-btn-center-lr owl-btn-1" },
        [
          _c("div", { staticClass: "item" }, [
            _c("div", { staticClass: "listing-bx listing-sm" }, [
              _c("div", { staticClass: "listing-media" }, [
                _c("img", {
                  attrs: { src: "images/listing/pic5.jpg", alt: "" },
                }),
              ]),
              _c("div", { staticClass: "listing-info" }, [
                _c("h3", { staticClass: "title" }, [
                  _c("a", { attrs: { href: "listing-details.html" } }, [
                    _vm._v("Wedding Venue Title Name"),
                  ]),
                ]),
                _c("p", { staticClass: "location" }, [
                  _c("i", { staticClass: "fa fa-map-marker" }),
                  _vm._v(" Ahmedabad, Gujarat. "),
                ]),
              ]),
            ]),
          ]),
          _c("div", { staticClass: "item" }, [
            _c("div", { staticClass: "listing-bx listing-sm" }, [
              _c("div", { staticClass: "listing-media" }, [
                _c("img", {
                  attrs: { src: "images/listing/pic6.jpg", alt: "" },
                }),
              ]),
              _c("div", { staticClass: "listing-info" }, [
                _c("h3", { staticClass: "title" }, [
                  _c("a", { attrs: { href: "listing-details.html" } }, [
                    _vm._v("Wedding Venue Title Name"),
                  ]),
                ]),
                _c("p", { staticClass: "location" }, [
                  _c("i", { staticClass: "fa fa-map-marker" }),
                  _vm._v(" Ahmedabad, Gujarat. "),
                ]),
              ]),
            ]),
          ]),
          _c("div", { staticClass: "item" }, [
            _c("div", { staticClass: "listing-bx listing-sm" }, [
              _c("div", { staticClass: "listing-media" }, [
                _c("img", {
                  attrs: { src: "images/listing/pic7.jpg", alt: "" },
                }),
              ]),
              _c("div", { staticClass: "listing-info" }, [
                _c("h3", { staticClass: "title" }, [
                  _c("a", { attrs: { href: "listing-details.html" } }, [
                    _vm._v("Wedding Venue Title Name"),
                  ]),
                ]),
                _c("p", { staticClass: "location" }, [
                  _c("i", { staticClass: "fa fa-map-marker" }),
                  _vm._v(" Ahmedabad, Gujarat. "),
                ]),
              ]),
            ]),
          ]),
        ]
      ),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "row" }, [
      _c("div", { staticClass: "col-lg-6" }, [
        _c("div", { staticClass: "faq-box" }, [
          _c("h5", { staticClass: "title" }, [
            _vm._v(" Describe the best wedding that happened at your venue? "),
          ]),
          _c("p", [
            _vm._v(
              " It would be impossible to single out one wedding! We work incredibly hard to ensure that every couple feels like the first couple to be wed at the Priory and that it is special and personal to them so they are all different in their own way! "
            ),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "col-lg-6" }, [
        _c("div", { staticClass: "faq-box" }, [
          _c("h5", { staticClass: "title" }, [
            _vm._v(" What is your No. 1 wedding manager tip for couples? "),
          ]),
          _c("p", [
            _vm._v(
              " Get your venue and your date booked first. So many other details will naturally fall into place once this is decided that it will make it a lot easier to make decisions. "
            ),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "col-lg-6" }, [
        _c("div", { staticClass: "faq-box" }, [
          _c("h5", { staticClass: "title" }, [
            _vm._v(
              " What’s your favourite personal touch you’ve seen at a wedding? "
            ),
          ]),
          _c("p", [
            _vm._v(
              " Our couples receive exclusive use of the entire house and it is always lovely when they really take over and make it their home for the day. Family photos on the window sills and mantle piece and guests wandering and relaxing at their leisure throughout the day. "
            ),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "col-lg-6" }, [
        _c("div", { staticClass: "faq-box" }, [
          _c("h5", { staticClass: "title" }, [
            _vm._v(" Describe your venue in 5 adjectives. "),
          ]),
          _c("p", [
            _vm._v(" Breath taking, Rural, Exclusive, Comfortable, Magical "),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "col-lg-6" }, [
        _c("div", { staticClass: "faq-box" }, [
          _c("h5", { staticClass: "title" }, [
            _vm._v(" Where’s the best photo spot at your venue? "),
          ]),
          _c("p", [
            _vm._v(
              " The Tower is such a photographers favourite! Adjacent to the main house and the inner courtyard, you can capture stunning photos dawn, day, dusk and night! "
            ),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "col-lg-6" }, [
        _c("div", { staticClass: "faq-box" }, [
          _c("h5", { staticClass: "title" }, [
            _vm._v(
              " Have you had any celebrity guest or wedding at your venue? "
            ),
          ]),
          _c("p", [
            _vm._v(
              " Many a time but sadly we have to keep the who and the when to ourselves! "
            ),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "col-lg-6" }, [
        _c("div", { staticClass: "faq-box" }, [
          _c("h5", { staticClass: "title" }, [
            _vm._v(" What’s your favourite canapé? "),
          ]),
          _c("p", [
            _vm._v(
              " Our office team debate this regularly but as I'm the one on the keyboard it has to be..... chocolate dipped strawberries dressed like mini Brides and Grooms! "
            ),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "col-lg-6" }, [
        _c("div", { staticClass: "faq-box" }, [
          _c("h5", { staticClass: "title" }, [
            _vm._v(" What’s your favourite midnight treat? "),
          ]),
          _c("p", [_vm._v("Bacon baps without a doubt.")]),
        ]),
      ]),
      _c("div", { staticClass: "col-lg-6" }, [
        _c("div", { staticClass: "faq-box" }, [
          _c("h5", { staticClass: "title" }, [
            _vm._v(" What is your venue's most unique feature? "),
          ]),
          _c("p", [
            _vm._v(
              " Probably the fact that we allow our couples to actually use the house all day and overnight. We don't actually permit a marquee so couples and their guests can enjoy their very own Tudor manor house for a day. "
            ),
          ]),
        ]),
      ]),
      _c("div", { staticClass: "col-lg-6" }, [
        _c("div", { staticClass: "faq-box" }, [
          _c("h5", { staticClass: "title" }, [
            _vm._v(" What part of your business are you most proud of? "),
          ]),
          _c("p", [
            _vm._v(
              " We are all about the weddings. We haven't deviated into events or conferences, for 26 years we have 100% focused on making ourselves wedding experts. "
            ),
          ]),
        ]),
      ]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "alert alert-info alert-iconbx" }, [
      _c("i", { staticClass: "fa fa-star-o alert-icon" }),
      _c("h5", { staticClass: "title" }, [_vm._v("Wedding Manager Benefits")]),
      _c("p", [_vm._v("Insure your ring before you show off the bling!")]),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("div", { staticClass: "dlab-divider bg-gray-dark" }, [
      _c("i", { staticClass: "icon-dot c-square" }),
    ])
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c(
      "div",
      { staticClass: "item4 owl-carousel owl-btn-center-lr owl-btn-1" },
      [
        _c("div", { staticClass: "item" }, [
          _c("div", { staticClass: "listing-bx listing-sm" }, [
            _c("div", { staticClass: "listing-media" }, [
              _c("img", { attrs: { src: "images/listing/pic3.jpg", alt: "" } }),
              _c("div", { staticClass: "media-info" }, [
                _c("ul", { staticClass: "featured-star" }, [
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                ]),
                _c(
                  "a",
                  {
                    staticClass: "like-btn",
                    attrs: { href: "javascript:void(0)" },
                  },
                  [_c("i", { staticClass: "fa fa-heart-o" })]
                ),
              ]),
            ]),
            _c("div", { staticClass: "listing-info" }, [
              _c("h3", { staticClass: "title" }, [
                _c("a", { attrs: { href: "listing-details.html" } }, [
                  _vm._v("Wedding Venue Title Name"),
                ]),
              ]),
              _c("p", { staticClass: "location" }, [
                _c("i", { staticClass: "fa fa-map-marker" }),
                _vm._v(" Ahmedabad, Gujarat. "),
              ]),
            ]),
          ]),
        ]),
        _c("div", { staticClass: "item" }, [
          _c("div", { staticClass: "listing-bx listing-sm" }, [
            _c("div", { staticClass: "listing-media" }, [
              _c("img", { attrs: { src: "images/listing/pic3.jpg", alt: "" } }),
              _c("div", { staticClass: "media-info" }, [
                _c("ul", { staticClass: "featured-star" }, [
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                ]),
                _c(
                  "a",
                  {
                    staticClass: "like-btn",
                    attrs: { href: "javascript:void(0)" },
                  },
                  [_c("i", { staticClass: "fa fa-heart-o" })]
                ),
              ]),
            ]),
            _c("div", { staticClass: "listing-info" }, [
              _c("h3", { staticClass: "title" }, [
                _c("a", { attrs: { href: "listing-details.html" } }, [
                  _vm._v("Wedding Venue Title Name"),
                ]),
              ]),
              _c("p", { staticClass: "location" }, [
                _c("i", { staticClass: "fa fa-map-marker" }),
                _vm._v(" Ahmedabad, Gujarat. "),
              ]),
            ]),
          ]),
        ]),
        _c("div", { staticClass: "item" }, [
          _c("div", { staticClass: "listing-bx listing-sm" }, [
            _c("div", { staticClass: "listing-media" }, [
              _c("img", { attrs: { src: "images/listing/pic3.jpg", alt: "" } }),
              _c("div", { staticClass: "media-info" }, [
                _c("ul", { staticClass: "featured-star" }, [
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                ]),
                _c(
                  "a",
                  {
                    staticClass: "like-btn",
                    attrs: { href: "javascript:void(0)" },
                  },
                  [_c("i", { staticClass: "fa fa-heart-o" })]
                ),
              ]),
            ]),
            _c("div", { staticClass: "listing-info" }, [
              _c("h3", { staticClass: "title" }, [
                _c("a", { attrs: { href: "listing-details.html" } }, [
                  _vm._v("Wedding Venue Title Name"),
                ]),
              ]),
              _c("p", { staticClass: "location" }, [
                _c("i", { staticClass: "fa fa-map-marker" }),
                _vm._v(" Ahmedabad, Gujarat. "),
              ]),
            ]),
          ]),
        ]),
        _c("div", { staticClass: "item" }, [
          _c("div", { staticClass: "listing-bx listing-sm" }, [
            _c("div", { staticClass: "listing-media" }, [
              _c("img", { attrs: { src: "images/listing/pic3.jpg", alt: "" } }),
              _c("div", { staticClass: "media-info" }, [
                _c("ul", { staticClass: "featured-star" }, [
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                  _c("li", [_c("i", { staticClass: "fa fa-star" })]),
                ]),
                _c(
                  "a",
                  {
                    staticClass: "like-btn",
                    attrs: { href: "javascript:void(0)" },
                  },
                  [_c("i", { staticClass: "fa fa-heart-o" })]
                ),
              ]),
            ]),
            _c("div", { staticClass: "listing-info" }, [
              _c("h3", { staticClass: "title" }, [
                _c("a", { attrs: { href: "listing-details.html" } }, [
                  _vm._v("Wedding Venue Title Name"),
                ]),
              ]),
              _c("p", { staticClass: "location" }, [
                _c("i", { staticClass: "fa fa-map-marker" }),
                _vm._v(" Ahmedabad, Gujarat. "),
              ]),
            ]),
          ]),
        ]),
      ]
    )
  },
  function () {
    var _vm = this
    var _h = _vm.$createElement
    var _c = _vm._self._c || _h
    return _c("li", { staticClass: "active" }, [_c("a", [_vm._v("Details")])])
  },
]
render._withStripped = true

export { render, staticRenderFns }"}]}