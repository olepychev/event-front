{"remainingRequest":"C:\\Users\\saini\\Desktop\\event-front\\event-front\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\saini\\Desktop\\event-front\\event-front\\src\\views\\PlannerExpenses.vue?vue&type=template&id=5f9ca143&scoped=true&","dependencies":[{"path":"C:\\Users\\saini\\Desktop\\event-front\\event-front\\src\\views\\PlannerExpenses.vue","mtime":1673479486948},{"path":"C:\\Users\\saini\\Desktop\\event-front\\event-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673646901215},{"path":"C:\\Users\\saini\\Desktop\\event-front\\event-front\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":1673646917331},{"path":"C:\\Users\\saini\\Desktop\\event-front\\event-front\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1673646901215},{"path":"C:\\Users\\saini\\Desktop\\event-front\\event-front\\node_modules\\vue-loader\\lib\\index.js","mtime":1673646912770}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}